/* global window, document, fetch */
;(() => {
  // Prevent multiple initializations
  if (window.AIChatbot && window.AIChatbot.initialized) {
    return
  }

  const LOGO_URL = "https://nwcmc.gov.in/web/upload_files/website/img/logo/weblogo6364d3f0f495b6ab9dcf8d3b5c6e0b01.png"

  const DIRECT_RTI_REPLY = `Go to this link - https://nwcmc.gov.in/web/others.php?uid=NDM1&id=ENG#gsc.tab=0

Various RTS Information available:
- Right to Information Act, 2005
- Right to Information Order
- Right to Information Order ‚Äì 17/12/2015
- Right to Information Order ‚Äì 07/07/2017
- Right to Information Order ‚Äì 14/12/2017
- Right to Information Order ‚Äì 23/08/2018
- Right to Information Order ‚Äì 17/07/2019
- Right to Information Order ‚Äì 13/10/2020
- Right to Information Order ‚Äì 15/12/2020
- Right to Information Order ‚Äì 16/09/2021
- Right to Information Order ‚Äì 09/03/2023
- Information to be Proactively Disclosed under Section 4(1)(b) of the Right to Information Act, 2005 (Computer Department)
- Information to be Proactively Disclosed under Section 4(1)(b) of the Right to Information Act, 2005 (Stores Department)
- Information to be Proactively Disclosed under Section 4(1)(b) of the Right to Information Act, 2005 (Computer Department 2024‚Äì25)`



const DIRECT_GRIEVANCE_REPLY = `Steps to Submit a Grievance or Complaint
Step 1: Log in at: https://nwcmc.gov.in/web/citizen/grievance/login.php?uid=NzI4&id=ENG&cmd=clear#gsc.tab=0 
Use your Registered Mobile Number to log in.
If logging in for the first time, select New Registration.

Step 2: After logging in, open the sidebar menu and select New Complaint.

Step 3: Fill in the required details:
Zone (‡§ù‡•ã‡§®)*
Department (‡§µ‡§ø‡§≠‡§æ‡§ó)*
Category (‡§∂‡•ç‡§∞‡•á‡§£‡•Ä)*
Priority (‡§™‡•ç‡§∞‡§æ‡§ß‡§æ‡§®‡•ç‡§Ø)*
Address (‡§™‡§§‡•ç‡§§‡§æ)*
Description (‡§µ‡§∞‡•ç‡§£‡§®)*
Optional details:
Ward (‡§™‡•ç‡§∞‡§≠‡§æ‡§ó)
File (‡§´‡§æ‡§á‡§≤) ‚Äì if any document needs to be uploaded

Step 4: Click Submit.
Note: To check the status of your grievance/complaint, go to the sidebar menu and select Complaint List. The current status of your application will be displayed there.`



const CONTACT_ENGLISH = `üìû Contact:
+912462234710, +912462234577`

const CONTACT_MARATHI = `üìû ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï: +91 2462 234710, +91 2462 234577`


const DIRECT_GRIEVANCE_REPLY_MARATHI = `üìù ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞/‡§Ö‡§∞‡•ç‡§ú ‡§∏‡§æ‡§¶‡§∞ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡§æ‡§Ø‡§±‡•ç‡§Ø‡§æ
‡§™‡§æ‡§Ø‡§∞‡•Ä 1: ‡§Ø‡§æ ‡§≤‡§ø‡§Ç‡§ï‡§µ‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡§æ ‚Äì https://nwcmc.gov.in/web/citizen/grievance/login.php?uid=NzI4&id=ENG&cmd=clear#gsc.tab=0
‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä‡§ï‡•É‡§§ ‡§Æ‡•ã‡§¨‡§æ‡§à‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§µ‡§æ‡§™‡§∞‡§æ.
‡§™‡•ç‡§∞‡§•‡§Æ ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡§§ ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ New Registration ‡§®‡§ø‡§µ‡§°‡§æ.

‡§™‡§æ‡§Ø‡§∞‡•Ä 2: ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§®‡§Ç‡§§‡§∞, ‡§∏‡§æ‡§á‡§°‡§¨‡§æ‡§∞ ‡§Æ‡•á‡§®‡•Ç‡§Æ‡§ß‡•Ç‡§® New Complaint ‡§®‡§ø‡§µ‡§°‡§æ.

‡§™‡§æ‡§Ø‡§∞‡•Ä 3: ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§≠‡§∞‡§æ:
Zone (‡§ù‡•ã‡§®)*
Department (‡§µ‡§ø‡§≠‡§æ‡§ó)*
Category (‡§∂‡•ç‡§∞‡•á‡§£‡•Ä)*
Priority (‡§™‡•ç‡§∞‡§æ‡§ß‡§æ‡§®‡•ç‡§Ø)*
Address (‡§™‡§§‡•ç‡§§‡§æ)*
Description (‡§µ‡§∞‡•ç‡§£‡§®)*
‡§™‡§∞‡•ç‡§Ø‡§æ‡§Ø‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä:
Ward (‡§™‡•ç‡§∞‡§≠‡§æ‡§ó)
File (‡§´‡§æ‡§á‡§≤) ‚Äì ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§¶‡§∏‡•ç‡§§‡§ê‡§µ‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ

‡§™‡§æ‡§Ø‡§∞‡•Ä 4: Submit ‡§µ‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ.
‡§ü‡•Ä‡§™: ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡•Ä/‡§Ö‡§∞‡•ç‡§ú‡§æ‡§ö‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡•Ä ‡§§‡§™‡§æ‡§∏‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä, ‡§∏‡§æ‡§á‡§°‡§¨‡§æ‡§∞ ‡§Æ‡•á‡§®‡•Ç‡§Æ‡§ß‡•Ç‡§® Complaint List ‡§®‡§ø‡§µ‡§°‡§æ. ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§Ö‡§∞‡•ç‡§ú‡§æ‡§ö‡•Ä ‡§∏‡§¶‡•ç‡§Ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä ‡§§‡§ø‡§•‡•á ‡§¶‡§ø‡§∏‡•á‡§≤.`



const DIRECT_RTI_REPLY_MARATHI = `‡§Ø‡§æ ‡§≤‡§ø‡§Ç‡§ï‡§µ‡§∞ ‡§ú‡§æ ‚Äì https://nwcmc.gov.in/web/others.php?uid=NDM1&id=ENG&#gsc.tab=0
‡§µ‡§ø‡§µ‡§ø‡§ß ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ (RTS) ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠‡§æ‡§§‡•Ä‡§≤ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä:
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ö‡§ß‡§ø‡§®‡§ø‡§Ø‡§Æ, 2005
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ü‡§¶‡•á‡§∂
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ü‡§¶‡•á‡§∂ ‚Äì 17/12/2015
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ü‡§¶‡•á‡§∂ ‚Äì 07/07/2017
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ü‡§¶‡•á‡§∂ ‚Äì 14/12/2017
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ü‡§¶‡•á‡§∂ ‚Äì 23/08/2018
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ü‡§¶‡•á‡§∂ ‚Äì 17/07/2019
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ü‡§¶‡•á‡§∂ ‚Äì 13/10/2020
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ü‡§¶‡•á‡§∂ ‚Äì 15/12/2020
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ü‡§¶‡•á‡§∂ ‚Äì 16/09/2021
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ü‡§¶‡•á‡§∂ ‚Äì 09/03/2023
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ö‡§ß‡§ø‡§®‡§ø‡§Ø‡§Æ, 2005 ‡§ï‡§≤‡§Æ 4(1)(‡§ñ) ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡•ç‡§µ‡§Ø‡§Ç‡§™‡•ç‡§∞‡•á‡§∞‡§£‡•á‡§®‡•á ‡§ú‡§æ‡§π‡•Ä‡§∞ ‡§ï‡§∞‡§æ‡§µ‡§Ø‡§æ‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä (‡§∏‡§Ç‡§ó‡§£‡§ï ‡§µ‡§ø‡§≠‡§æ‡§ó)
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ö‡§ß‡§ø‡§®‡§ø‡§Ø‡§Æ, 2005 ‡§ï‡§≤‡§Æ 4(1)(‡§ñ) ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡•ç‡§µ‡§Ø‡§Ç‡§™‡•ç‡§∞‡•á‡§∞‡§£‡•á‡§®‡•á ‡§ú‡§æ‡§π‡•Ä‡§∞ ‡§ï‡§∞‡§æ‡§µ‡§Ø‡§æ‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä (‡§≠‡§æ‡§Ç‡§°‡§æ‡§∞ ‡§µ‡§ø‡§≠‡§æ‡§ó)
‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§Ö‡§ß‡§ø‡§®‡§ø‡§Ø‡§Æ, 2005 ‡§ï‡§≤‡§Æ 4(1)(‡§ñ) ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡•ç‡§µ‡§Ø‡§Ç‡§™‡•ç‡§∞‡•á‡§∞‡§£‡•á‡§®‡•á ‡§ú‡§æ‡§π‡•Ä‡§∞ ‡§ï‡§∞‡§æ‡§µ‡§Ø‡§æ‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä (‡§∏‡§Ç‡§ó‡§£‡§ï ‡§µ‡§ø‡§≠‡§æ‡§ó 2024‚Äì25)`




  const AIChatbot = {
    initialized: false,
    config: null,
    isOpen: false,
    messages: [],

    // Conversation state
    currentLanguage: null, // 'english' | 'marathi'
    currentLevel: "language_select", // 'language_select' | 'top_category' | 'second_menu' | 'submenu' | 'free_text'
    currentTopCategory: null, // 'rts' | 'rti' | 'payments' | 'grievance'
    currentMenuContext: null, // selected menu object (within a top category)

    // Voice features state (NEW)
    sttSupported: false,
    ttsSupported: false,
    recognition: null,
    isListening: false,
    speaking: false,
    selectedVoice: null,

    // Menu structures
    MENU_STRUCTURE: {
      english: {
        welcome: "Hi, please choose a language to continue.\n‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞, ‡§™‡•Å‡§¢‡•á ‡§ú‡§æ‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡•É‡§™‡§Ø‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ.",
        topCategories: [
          { label: "RTS", key: "rts" },
          { label: "RTI", key: "rti" },
          { label: "Key Payment Serving", key: "payments" },
          { label: "Grievance", key: "grievance" },
          { label: "Emergency Contact", key: "contact" },
          // { label: "Emergency Contact", key: "suggestion" },
        ],
        // RTS full menus with submenus
        rts: {
          title: "Right to Services (RTS)",
          menus: [
            {
              label: "Applied List",
              query: "Applied List",
              submenus: [{ label: "All Application List", query: "All Application List" }],
            },
            {
              label: "Property",
              query: "Property",
              submenus: [
                { label: "New tax Assessment", query: "New Assessment of Property tax" },
                { label: "Re-Assessment of tax", query: "Re-Assessment of Property tax" },
                {
                  label: "Demo/Rebuild Assessment",
                  query: "Demo/Rebuild Assessment",
                },
                { label: "Name Transfer‚ÄìDocuments", query: "Name Transfer - By Valid Documents" },
                { label: "Name Transfer - Heirship", query: "Name Transfer - By Heirship" },
                { label: "Name Transfer - Other Way", query: "Name Transfer - By Other Way" },
                { label: "Name Transfer - Division", query: "Name Transfer - By Property Division" },
                { label: "Tax Exemption-Property tax", query: "Tax Exemption for Property tax" },
                { label: "Tax Exemption -Unoccupied", query: "Tax Exemption - Unoccupied" },
                { label: "Raising Tax Objection", query: "Raising Tax Objection" },
                { label: "Self Assessment of tax", query: "Self Assessment of Property tax" },
                { label: "Demand Bill of Property tax", query: "Demand Bill of Property tax" },
                { label: "NOC- Property Tax", query: "No Dues Certificate - Property Tax" },
                { label: "Pay Your Property Tax", query: "Pay Your Property Tax" },
                { label: "Property Tax Ledger", query: "Extract of Property Tax Ledger" },
              ],
            },
            {
              label: "Water",
              query: "Water",
              submenus: [
                { label: "New Water Connection", query: "New Water Connection" },
                { label: "NOC - Water Charges", query: "No Dues Certificate - Water Charges" },
                { label: "Demand Bill for Usage", query: "Demand Bill for Water Usage" },
                { label: "Water Connection Certificate", query: "Water Connection Certificate" },
                { label: "Complaint- Faulty Meter", query: "Complaint for Faulty Meter" },
                { label: "Complaint- Water Pressure", query: "Complaint for Water Pressure" },
                { label: "Complaint- Water Quality", query: "Complaint for Water Quality" },
                { label: "Complaint- Illegal Connection", query: "Complaint for Illegal Connection" },
                { label: "OwneR Change- Connection", query: "Ownership Change of Water Connection" },
                { label: "Change in Tap Size", query: "Change in Tap Size" },
                { label: "Disconnection", query: "Disconnection of Water Connection" },
                { label: "Change in Usage Category", query: "Change in Water Usage Category" },
                { label: "Re-Connection", query: "Re-Connection of Water Connection" },
                { label: "Plumber License - New", query: "Plumber License - New" },
                { label: "Plumber License Renewal", query: "Renewal of Plumber License" },
              ],
            },
            {
              label: "No Objection Certificate",
              query: "No Objection Certificate",
              submenus: [
                { label: "NOC for Fire (Provisional)", query: "NOC for Fire (Provisional)" },
                { label: "NOC for Fire - Final", query: "NOC for Fire - Final" },
                { label: "NOC for Fire - Final New", query: "NOC for Fire - Final New" },
                { label: "NOC for Fire - Renewal", query: "NOC for Fire - Renewal" },
                { label: "NOC for Godown/Store/Trade", query: "NOC for Godown/Store/Trade" },
                { label: "NOC for Pendol", query: "NOC for Pendol" },
              ],
            },
            {
              label: "Health",
              query: "Health",
              submenus: [
                { label: "Nursing Home Regi. -New", query: "Nursing Home Registration - New" },
                { label: "Nursing Home Regi. -Renewal", query: "Nursing Home Registration - Renewal" },
                { label: "Nursing Home -Owner Change", query: "Nursing Home Regi. - Ownership Change" },
                { label: "Cleanliness in City", query: "Maintenance of Cleanliness in City" },
              ],
            },
            {
              label: "Birth, Death & Marriage",
              query: "Birth, Death & Marriage",
              submenus: [
                { label: "Birth Certificate", query: "Birth Certificate" },
                { label: "Death Certificate", query: "Death Certificate" },
                { label: "Marriage Certificate", query: "Marriage Certificate" },
              ],
            },
            {
              label: "Advertisement & Movie Shooting",
              query: "Advertisement & Movie Shooting",
              submenus: [
                { label: "Hoarding/Sinage License", query: "Hoarding & Sinage License" },
                { label: "Movies Shooting License", query: "Movies Shooting License" },
              ],
            },
            {
              label: "Garden",
              query: "Garden",
              submenus: [{ label: "Tree Cutting Permission", query: "Permission for Tree Cutting" }],
            },
            {
              label: "Town Planning",
              query: "Town Planning",
              submenus: [
                { label: "Area Map", query: "Area Map" },
                { label: "Zone Certificate", query: "Zone Certificate" },
                { label: "Building Permission", query: "Building Permission" },
                { label: "Plinth Certificate", query: "Plinth Certificate" },
                { label: "Occupancy Certificate", query: "Occupancy Certificate" },
              ],
            },
            {
              label: "Trade License",
              query: "Trade License",
              submenus: [
                { label: "New Trade License", query: "New Trade License" },
                { label: "Renewal of Trade Licence", query: "Renewal of Trade Licence" },
                { label: "Transfer of Ownership", query: "Transfer of Trade Licence Ownership" },
                { label: "Change in the Firm Name", query: "Change in the Firm Name" },
                { label: "Change in the Trade Category", query: "Change in the Trade Category" },
                { label: "Change in the Partner's Name", query: "Change in the Partner's Name" },
                { label: "Addition/Removal of Partner", query: "Addition/Removal of Partner" },
                { label: "Cancellation of License", query: "Cancellation of Trade License" },
                { label: "Duplicate copy of Licence", query: "Duplicate copy of Trade Licence" },
                { label: "Auto Renewal of Licence", query: "Auto Renewal of Trade Licence" },
                { label: "Notice For Expired Licence", query: "Notice For Expired Trade Licence" },
                { label: "Hawker Registration", query: "Hawker Registration" },
                { label: "Lodging House-New Licence", query: "Lodging House - New Licence" },
                { label: "Lodging House-Renewal Licence", query: "Lodging House - Renewal of Licence" },
                { label: "Function Hall-New Licence", query: "Function Hall - New Licence" },
                { label: "Function Hall-Renewal Licence", query: "Function Hall - Renewal of Licence" },
              ],
            },
            {
              label: "PWD",
              query: "PWD",
              submenus: [{ label: "Fill Pot Holes", query: "To Fill Pot Holes in Road" }],
            },
            {
              label: "Sewer",
              query: "Sewer",
              submenus: [
                { label: "New Drainage Connection", query: "New Drainage Connection" },
                { label: "Maintenance of Gutter", query: "Maintenance of Gutter /Manhole Cover" },
              ],
            },
          ],
        },
        // Payment Serving only Water, Property, Trade with two submenus
        payments: {
          title: "Key Payment Serving",
          menus: [
            {
              label: "Water",
              query: "Payment - Water",
              submenus: [
                { label: "Payment Steps", query: "Payment Steps for Water" },
                { label: "Offline Payment", query: "Offline Payment for Water" },
              ],
            },
            {
              label: "Property",
              query: "Payment - Property",
              submenus: [
                { label: "Payment Steps", query: "Payment Steps for Property" },
                { label: "Offline Payment", query: "Offline Payment for Property" },
              ],
            },
          ],
        },
        // RTI, Grievance, Suggestion updated sections below
        rti: {
          title: "Right to Information (RTI)",
          // No menus/submenus; show a direct reply
          directReply: DIRECT_RTI_REPLY,
          menus: [],
        },
        grievance: {
          title: "Grievance",
          // No menus/submenus; show a direct reply
          directReply: DIRECT_GRIEVANCE_REPLY,
          menus: [],
        },

        // suggestion: {
        //   title: "Suggestion",
        //   // Exactly 2 menus, no submenus; each menu directly replies
        //   menus: [
        //     {
        //       label: "Online Form",
        //       query: "suggestion_online",
        //       submenus: [],
        //       replyKey: "Suggestion Online Form", // uses SAMPLE_RESPONSES
        //     },
        //     {
        //       label: "Offline",
        //       query: "suggestion_offline",
        //       submenus: [],
        //       reply:
        //         "Submit your suggestion offline at the ward office counter and collect an acknowledgement (sample).",
        //     },
        //   ],
        // },

        contact: {
          title: "Emergency Contact",
          // Exactly 2 menus, no submenus; each menu directly replies
          directReply: CONTACT_ENGLISH,
          menus: [],
        },


        other_option: "Other (Ask a question)",
        back_main: "Main Categories",
        back_prev: "Back",
        start_over: "Start Over",
      },

      // Marathi localization
      marathi: {
        welcome: "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞, ‡§™‡•Å‡§¢‡•á ‡§ú‡§æ‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡•É‡§™‡§Ø‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ.\nHi, please choose a language to continue.",
        topCategories: [
          { label: "RTS (‡§π‡§ï‡•ç‡§ï ‡§∏‡•á‡§µ‡§æ)", key: "rts" },
          { label: "RTI (‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞)", key: "rti" },

          { label: "‡§Æ‡§π‡§§‡•ç‡§µ‡§æ‡§ö‡•Ä ‡§¶‡•á‡§Ø ‡§∏‡•á‡§µ‡§æ", key: "payments" },
          { label: "‡§§‡§ï‡•ç‡§∞‡§æ‡§∞", key: "grievance" },
          { label: "üìû ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§® ‡§ï‡•â‡§≤ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï", key: "contact" },
          // { label: "‡§∏‡•Ç‡§ö‡§®‡§æ", key: "suggestion" },
        ],
        rts: {
          title: "RTS (‡§π‡§ï‡•ç‡§ï ‡§∏‡•á‡§µ‡§æ)",
          menus: [
            {
              label: "‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•á‡§≤‡•á‡§≤‡•Ä ‡§Ø‡§æ‡§¶‡•Ä", // Applied List
              query: "Applied List",
              submenus: [
                { label: "‡§Ö‡§∞‡•ç‡§ú ‡§Ø‡§æ‡§¶‡•Ä", query: "All Application List" }, // Application List
              ],
            },
            {
              label: "‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ", // Property
              query: "Property",
              submenus: [
                { label: "‡§®‡§µ‡•Ä‡§® ‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ ‡§ï‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®", query: "New Assessment of Property tax" },
                { label: "‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ ‡§ï‡§∞ ‡§™‡•Å‡§®‡§∞‡•ç‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®", query: "Re-Assessment of Property tax" },
                { label: "‡§ï‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®-‡§™‡§æ‡§°‡§£‡•á/‡§™‡•Å‡§®‡§∞‡•ç‡§∞‡§ö‡§®‡§æ", query: "Tax Assessment - Demolition & Reconstruct" },
                { label: "‡§¶‡§∏‡•ç‡§§‡§ê‡§µ‡§ú‡§æ‡§Ç‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§®‡§æ‡§µ ‡§¨‡§¶‡§≤‡§æ", query: "Name Transfer - By Valid Documents" },
                { label: "‡§µ‡§æ‡§∞‡§∏‡§æ‡§π‡§ï‡•ç‡§ï‡§æ‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§®‡§æ‡§µ ‡§¨‡§¶‡§≤‡§æ", query: "Name Transfer - By Heirship" },
                { label: "‡§á‡§§‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§æ‡§®‡•á ‡§®‡§æ‡§µ ‡§¨‡§¶‡§≤‡§æ", query: "Name Transfer - By Other Way" },
                { label: "‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ ‡§µ‡§ø‡§≠‡§æ‡§ó‡§£‡•Ä‡§®‡•á ‡§®‡§æ‡§µ ‡§¨‡§¶‡§≤‡§æ", query: "Name Transfer - By Property Division" },
                { label: "‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ ‡§ï‡§∞‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡§∞ ‡§∏‡§µ‡§≤‡§§", query: "Tax Exemption for Property tax" },
                { label: "‡§Ö‡§µ‡§æ‡§∏‡•ç‡§§‡§µ ‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡•á‡§∏‡§æ‡§†‡•Ä ‡§ï‡§∞ ‡§∏‡§µ‡§≤‡§§", query: "Tax Exemption - Unoccupied" },
                { label: "‡§ï‡§∞ ‡§Ü‡§ï‡•ç‡§∑‡•á‡§™ ‡§®‡•ã‡§Ç‡§¶‡§µ‡§æ", query: "Raising Tax Objection" },
                { label: "‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ ‡§ï‡§∞", query: "Self Assessment of Property tax" },
                { label: "‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ ‡§ï‡§∞ ‡§Æ‡§æ‡§ó‡§£‡•Ä ‡§¨‡§ø‡§≤", query: "Demand Bill of Property tax" },
                { label: "‡§®‡•ã ‡§°‡•ç‡§Ø‡•Ç‡§∏ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ - ‡§ï‡§∞", query: "No Dues Certificate - Property Tax" },
                { label: "‡§Ü‡§™‡§≤‡§æ ‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ ‡§ï‡§∞ ‡§≠‡§∞‡§æ", query: "Pay Your Property Tax" },
                { label: "‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ ‡§ï‡§∞ ‡§≤‡•á‡§ú‡§∞ ‡§â‡§§‡§æ‡§∞‡§æ", query: "Extract of Property Tax Ledger" },
              ],
            },
            {
              label: "‡§™‡§æ‡§£‡•Ä", // Water
              query: "Water",
              submenus: [
                { label: "‡§®‡§µ‡•Ä‡§® ‡§™‡§æ‡§£‡•Ä ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®", query: "New Water Connection" },
                { label: "‡§™‡§æ‡§£‡•Ä ‡§∂‡•Å‡§≤‡•ç‡§ï ‡§•‡§ï‡§¨‡§æ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", query: "No Dues Certificate - Water Charges" },
                { label: "‡§™‡§æ‡§£‡•Ä ‡§µ‡§æ‡§™‡§∞‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§æ‡§ó‡§£‡•Ä ‡§¨‡§ø‡§≤", query: "Demand Bill for Water Usage" },
                { label: "‡§™‡§æ‡§£‡•Ä ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", query: "Water Connection Certificate" },
                { label: "‡§¶‡•ã‡§∑‡•Ä ‡§Æ‡•Ä‡§ü‡§∞‡§∏‡§æ‡§†‡•Ä ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞", query: "Complaint for Faulty Meter" },
                { label: "‡§™‡§æ‡§£‡•Ä ‡§¶‡§æ‡§¨‡§æ‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞", query: "Complaint for Water Pressure" },
                { label: "‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡•á‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞", query: "Complaint for Water Quality" },
                { label: "‡§¨‡•á‡§ï‡§æ‡§Ø‡§¶‡•á‡§∂‡•Ä‡§∞ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®‡§∏‡§æ‡§†‡•Ä ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞", query: "Complaint for Illegal Connection" },
                { label: "‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®‡§ö‡§æ ‡§Æ‡§æ‡§≤‡§ï‡•Ä ‡§π‡§ï‡•ç‡§ï ‡§¨‡§¶‡§≤‡§æ", query: "Ownership Change of Water Connection" },
                { label: "‡§ü‡•Ö‡§™ ‡§Ü‡§ï‡§æ‡§∞‡§æ‡§§ ‡§¨‡§¶‡§≤", query: "Change in Tap Size" },
                { label: "‡§™‡§æ‡§£‡•Ä ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®‡§ö‡•á ‡§°‡§ø‡§∏‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®", query: "Disconnection of Water Connection" },
                { label: "‡§™‡§æ‡§£‡•Ä ‡§µ‡§æ‡§™‡§∞ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä‡§§ ‡§¨‡§¶‡§≤", query: "Change in Water Usage Category" },
                { label: "‡§™‡§æ‡§£‡•Ä ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§ú‡•ã‡§°‡§æ", query: "Re-Connection of Water Connection" },
                { label: "‡§™‡•ç‡§≤‡§Ç‡§¨‡§∞ ‡§≤‡§æ‡§Ø‡§∏‡§®‡•ç‡§∏ - ‡§®‡§µ‡•Ä‡§®", query: "Plumber License - New" },
                { label: "‡§™‡•ç‡§≤‡§Ç‡§¨‡§∞ ‡§≤‡§æ‡§Ø‡§∏‡§®‡•ç‡§∏ - ‡§®‡•Ç‡§§‡§®‡•Ä‡§ï‡§∞‡§£", query: "Renewal of Plumber License" },
              ],
            },
            {
              label: "‡§´‡§æ‡§Ø‡§∞ ‡§è‡§®‡§ì‡§∏‡•Ä", // Fire NOC
              query: "Fire NOC",
              submenus: [
                { label: "‡§´‡§æ‡§Ø‡§∞ ‡§è‡§®‡§ì‡§∏‡•Ä (‡§§‡§æ‡§§‡•ç‡§™‡•Å‡§∞‡§§‡•Ä)", query: "NOC for Fire (Provisional)" },
                { label: "‡§´‡§æ‡§Ø‡§∞ ‡§è‡§®‡§ì‡§∏‡•Ä - ‡§Ö‡§Ç‡§§‡§ø‡§Æ", query: "NOC for Fire - Final" },
                { label: "‡§´‡§æ‡§Ø‡§∞ ‡§è‡§®‡§ì‡§∏‡•Ä - ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§®‡§µ‡•Ä‡§®", query: "NOC for Fire - Final New" },
                { label: "‡§´‡§æ‡§Ø‡§∞ ‡§è‡§®‡§ì‡§∏‡•Ä - ‡§®‡•Ç‡§§‡§®‡•Ä‡§ï‡§∞‡§£", query: "NOC for Fire - Renewal" },
                { label: "‡§ó‡•ã‡§°‡§æ‡§ä‡§®/‡§∏‡•ç‡§ü‡•ã‡§Ö‡§∞/‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞‡§æ‡§∏‡§æ‡§†‡•Ä ‡§è‡§®‡§ì‡§∏‡•Ä", query: "NOC for Godown/Store/Trade" },
                { label: "‡§™‡§Ç‡§°‡§æ‡§≤‡§∏‡§æ‡§†‡•Ä ‡§è‡§®‡§ì‡§∏‡•Ä", query: "NOC for Pendol" },
              ],
            },
            {
              label: "‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø", // Health
              query: "Health",
              submenus: [
                { label: "‡§®‡§∞‡•ç‡§∏‡§ø‡§Ç‡§ó ‡§π‡•ã‡§Æ ‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä -‡§®‡§µ‡•Ä‡§®", query: "Nursing Home Registration - New" },
                { label: "‡§®‡§∞‡•ç‡§∏‡§ø‡§Ç‡§ó ‡§π‡•ã‡§Æ ‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä -‡§®‡•Ç‡§§‡§®‡•Ä‡§ï‡§∞‡§£", query: "Nursing Home Registration - Renewal" },
                { label: "‡§®‡§∞‡•ç‡§∏‡§ø‡§Ç‡§ó ‡§π‡•ã‡§Æ ‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä -‡§Æ‡§æ‡§≤‡§ï‡•Ä ‡§¨‡§¶‡§≤", query: "Nursing Home Regi. - Ownership Change" },
                { label: "‡§∂‡§π‡§∞‡§æ‡§§ ‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ‡§§‡•á‡§ö‡•á ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤", query: "Maintenance of Cleanliness in City" },
              ],
            },
            {
              label: "‡§ú‡§®‡•ç‡§Æ, ‡§Æ‡•É‡§§‡•ç‡§Ø‡•Ç ‡§µ ‡§µ‡§ø‡§µ‡§æ‡§π", // Birth, Death & Marriage
              query: "Birth, Death & Marriage",
              submenus: [
                { label: "‡§ú‡§®‡•ç‡§Æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", query: "Birth Certificate" },
                { label: "‡§Æ‡•É‡§§‡•ç‡§Ø‡•Ç ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", query: "Death Certificate" },
                { label: "‡§µ‡§ø‡§µ‡§æ‡§π ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", query: "Marriage Certificate" },
              ],
            },
            {
              label: "‡§ú‡§æ‡§π‡§ø‡§∞‡§æ‡§§ ‡§µ ‡§ö‡§ø‡§§‡•ç‡§∞‡§™‡§ü ‡§ö‡§ø‡§§‡•ç‡§∞‡•Ä‡§ï‡§∞‡§£", // Advertisement & Movie Shooting
              query: "Advertisement & Movie Shooting",
              submenus: [
                { label: "‡§´‡§≤‡§ï ‡§µ ‡§∏‡§æ‡§á‡§®‡§ú ‡§™‡§∞‡§µ‡§æ‡§®‡§æ", query: "Hoarding & Sinage License" },
                { label: "‡§ö‡§ø‡§§‡•ç‡§∞‡§™‡§ü ‡§ö‡§ø‡§§‡•ç‡§∞‡•Ä‡§ï‡§∞‡§£ ‡§™‡§∞‡§µ‡§æ‡§®‡§æ", query: "Movies Shooting License" },
              ],
            },
            {
              label: "‡§â‡§¶‡•ç‡§Ø‡§æ‡§®", // Garden
              query: "Garden",
              submenus: [{ label: "‡§ù‡§æ‡§° ‡§§‡•ã‡§°‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§™‡§∞‡§µ‡§æ‡§®‡§ó‡•Ä", query: "Permission for Tree Cutting" }],
            },
            {
              label: "‡§®‡§ó‡§∞ ‡§∞‡§ö‡§®‡§æ", // Town Planning
              query: "Town Planning",
              submenus: [
                { label: "‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§®‡§ï‡§æ‡§∂‡§æ", query: "Area Map" },
                { label: "‡§ù‡•ã‡§® ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", query: "Zone Certificate" },
                { label: "‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§™‡§∞‡§µ‡§æ‡§®‡§ó‡•Ä", query: "Building Permission" },
                { label: "‡§™‡•ç‡§≤‡§ø‡§Ç‡§• ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", query: "Plinth Certificate" },
                { label: "‡§ë‡§ï‡•ç‡§Ø‡•Å‡§™‡§Ç‡§∏‡•Ä ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", query: "Occupancy Certificate" },
              ],
            },
            {
              label: "‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§™‡§∞‡§µ‡§æ‡§®‡§æ", // Trade License
              query: "Trade License",
              submenus: [
                { label: "‡§®‡§µ‡•Ä‡§® ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§™‡§∞‡§µ‡§æ‡§®‡§æ", query: "New Trade License" },
                { label: "‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§®‡•Ç‡§§‡§®‡•Ä‡§ï‡§∞‡§£", query: "Renewal of Trade Licence" },
                { label: "‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§Æ‡§æ‡§≤‡§ï‡•Ä ‡§π‡§ï‡•ç‡§ï ‡§¨‡§¶‡§≤", query: "Transfer of Trade Licence Ownership" },
                { label: "‡§´‡§∞‡•ç‡§Æ ‡§®‡§æ‡§µ‡§æ‡§§ ‡§¨‡§¶‡§≤", query: "Change in the Firm Name" },
                { label: "‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä‡§§ ‡§¨‡§¶‡§≤", query: "Change in the Trade Category" },
                { label: "‡§≠‡§æ‡§ó‡•Ä‡§¶‡§æ‡§∞‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§®‡§æ‡§µ‡§æ‡§§ ‡§¨‡§¶‡§≤", query: "Change in the Partner's Name" },
                { label: "‡§≠‡§æ‡§ó‡•Ä‡§¶‡§æ‡§∞ ‡§∏‡§Æ‡§æ‡§µ‡•á‡§∂/‡§µ‡§ó‡§≥‡§æ", query: "Addition/Removal of Partner" },
                { label: "‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§∞‡§¶‡•ç‡§¶", query: "Cancellation of Trade License" },
                { label: "‡§™‡§∞‡§µ‡§æ‡§®‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§°‡•Å‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§ü ‡§™‡•ç‡§∞‡§§", query: "Duplicate copy of Trade Licence" },
                { label: "‡§™‡§∞‡§µ‡§æ ‡§Ü‡§™‡•ã‡§Ü‡§™ ‡§®‡•Ç‡§§‡§®‡•Ä‡§ï‡§∞‡§£", query: "Auto Renewal of Trade Licence" },
                { label: "‡§ï‡§æ‡§≤‡§¨‡§æ‡§π‡•ç‡§Ø ‡§™‡§∞‡§µ‡§æ‡§®‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§∏‡•Ç‡§ö‡§®‡§æ", query: "Notice For Expired Trade Licence" },
                { label: "‡§π‡•â‡§ï‡§∞‡•ç‡§∏ ‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä", query: "Hawker Registration" },
                { label: "‡§≤‡•â‡§ú‡§ø‡§Ç‡§ó ‡§π‡§æ‡§ä‡§∏ - ‡§®‡§µ‡•Ä‡§® ‡§™‡§∞‡§µ‡§æ‡§®‡§æ", query: "Lodging House - New Licence" },
                { label: "‡§≤‡•â‡§ú‡§ø‡§Ç‡§ó ‡§π‡§æ‡§ä‡§∏ - ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§®‡•Ç‡§§‡§®‡•Ä‡§ï‡§∞‡§£", query: "Lodging House - Renewal of Licence" },
                { label: "‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§π‡•â‡§≤ - ‡§®‡§µ‡•Ä‡§® ‡§™‡§∞‡§µ‡§æ‡§®‡§æ", query: "Function Hall - New Licence" },
                { label: "‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§π‡•â‡§≤ - ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§®‡•Ç‡§§‡§®‡•Ä‡§ï‡§∞‡§£", query: "Function Hall - Renewal of Licence" },
              ],
            },
            {
              label: "‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§µ‡§ø‡§≠‡§æ‡§ó", // PWD
              query: "PWD",
              submenus: [{ label: "‡§∞‡§∏‡•ç‡§§‡•ç‡§Ø‡§æ‡§§‡•Ä‡§≤ ‡§ñ‡§°‡•ç‡§°‡•á ‡§≠‡§∞‡§£‡•á", query: "To Fill Pot Holes in Road" }],
            },
            {
              label: "‡§Æ‡§≤‡§®‡§ø‡§∏‡•ç‡§∏‡§æ‡§∞‡§£", // Sewer
              query: "Sewer",
              submenus: [
                { label: "‡§®‡§µ‡•Ä‡§® ‡§°‡•ç‡§∞‡•á‡§®‡•á‡§ú ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®", query: "New Drainage Connection" },
                { label: "‡§ó‡§ü‡§∞/‡§Æ‡•Ö‡§®‡§π‡•ã‡§≤ ‡§ï‡§µ‡•ç‡§π‡§∞‡§ö‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤", query: "Maintenance of Gutter /Manhole Cover" },
              ],
            },
          ],
        },
        payments: {
          title: "‡§Æ‡§π‡§§‡•ç‡§µ‡§æ‡§ö‡•Ä ‡§¶‡•á‡§Ø ‡§∏‡•á‡§µ‡§æ",
          menus: [
            {
              label: "‡§™‡§æ‡§£‡•Ä",
              query: "Payment - Water",
              submenus: [
                { label: "‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§ü‡§™‡•ç‡§™‡•á ‡§™‡§æ‡§£‡•Ä", query: "Payment Steps for Water" },
                { label: "‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§™‡•á‡§Æ‡•á‡§Ç‡§ü", query: "Offline Payment for Water" },
              ],
            },
            {
              label: "‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ",
              query: "Payment - Property",
              submenus: [
                { label: "‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§ü‡§™‡•ç‡§™‡•á ‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ", query: "Payment Steps for Property" },
                { label: "‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§™‡•á‡§Æ‡•á‡§Ç‡§ü", query: "Offline Payment for Property" },
              ],
            },
          ],
        },
        // RTI, Grievance, Suggestion updated sections below
        rti: {
          title: "RTI (‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞)",
          directReply: DIRECT_RTI_REPLY_MARATHI,
          menus: [],
        },
        grievance: {
          title: "‡§§‡§ï‡•ç‡§∞‡§æ‡§∞",
          directReply: DIRECT_GRIEVANCE_REPLY_MARATHI,
          menus: [],
        },

        contact: {
          title: "üìû ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§® ‡§ï‡•â‡§≤ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï",
          // Exactly 2 menus, no submenus; each menu directly replies
          directReply: CONTACT_MARATHI,
          menus: [],
        },


        // suggestion: {
        //   title: "‡§∏‡•Ç‡§ö‡§®‡§æ",
        //   menus: [
        //     {
        //       label: "‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§´‡•â‡§∞‡•ç‡§Æ",
        //       query: "suggestion_online",
        //       submenus: [],
        //       replyKey: "Suggestion Online Form",
        //     },
        //     {
        //       label: "‡§ë‡§´‡§≤‡§æ‡§á‡§®",
        //       query: "suggestion_offline",
        //       submenus: [],
        //       reply: "‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§æ‡§§ ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§™‡§æ‡§µ‡§§‡•Ä ‡§ò‡•ç‡§Ø‡§æ (‡§®‡§Æ‡•Å‡§®‡§æ).",
        //     },
        //   ],
        // },
        other_option: "‡§á‡§§‡§∞ (‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§µ‡§ø‡§ö‡§æ‡§∞‡§æ)",
        back_main: "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä",
        back_prev: "‡§Æ‡§æ‡§ó‡•á",
        start_over: "‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ",
      },
    },

    // Sample replies for RTI & Grievance (and can be reused as placeholders)
SAMPLE_RESPONSES  : {
      "RTI Apply Online": `RTI Online:
- Visit the RTI portal (sample).
- Fill applicant details and subject matter.
- Upload supporting documents (if any).
- Pay the prescribed fee online.
- Submit and note the acknowledgment number.`,
      "RTI Apply Offline": `RTI Offline:
- Write an RTI application addressed to the PIO.
- Include your contact details and specific information sought.
- Attach fee via DD/IPO as applicable.
- Submit at the designated office and collect acknowledgment.`,
      "RTI Application Fee": `RTI Fee (Sample):
- Application Fee: Rs. 10
- Inspection Fee: Rs. 5 per page (sample)
- Additional charges may apply as per rules.`,
      "RTI Inspection Fee": `RTI Inspection (Sample):
- Inspection charges per page: Rs. 5 (sample)
- Payable at the time of document collection.`,
      "RTI First Appeal": `RTI First Appeal (Sample):
- File within 30 days of PIO's response/non-response.
- Address to the First Appellate Authority.
- Attach original RTI copy and acknowledgment.`,
      "RTI Second Appeal": `RTI Second Appeal (Sample):
- File to the State Information Commission.
- Include copies of RTI application and first appeal decision.`,
      "Submit Grievance Online": `Submit Grievance (Sample - Online):

      
- Go to Grievance portal (sample).
- Enter details, attach photos (optional).
- Submit and note the grievance ID.`,
      "Submit Grievance Offline": `Submit Grievance (Sample - Offline):
- Visit the ward office.
- Fill grievance form with contact details.
- Submit and collect receipt/ID.`,
      "Track Grievance By ID": `Track Grievance (Sample):
- Enter your grievance ID on the portal to view status.`,
      "Track Grievance By Mobile": `Track Grievance (Sample):
- Use your registered mobile number to fetch the grievance status.`,
      "Suggestion Online Form": `Suggestion (Sample):
- Use the online suggestion form to submit your inputs.`,
      "Offline Payment for Water": `Water - Offline Payment (Sample):
- Pay at the designated office counters.`,
      "Offline Payment for Property": `Property - Offline Payment (Sample):
- Pay at authorized collection centers.`,
      "Offline Payment for Trade": `Trade - Offline Payment (Sample):
- Pay at the trade licensing office.`,
      "Offline Payment for Nursing Home": `Nursing Home - Offline Payment (Sample):
- Pay at the Nursing Home licensing office.`,
      "Offline Payment for Fire Noc": `Fire Noc - Offline Payment (Sample):
- Pay at the Fire Noc licensing office.`,
    },

    init: function (config) {
      if (this.initialized) return
      this.config = config
      this.initialized = true
      this.createWidget()
      this.attachEventListeners()
      this.resetChat()
      // Initialize voice features (NEW)
      this.initVoice()
    },

    createWidget: function () {
      const widgetContainer = document.createElement("div")
      widgetContainer.id = "ai-chatbot-widget"
      widgetContainer.innerHTML = `
        <style>
          #ai-chatbot-widget {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 10000;
            font-family: ${this.config.theme.fontFamily};
          }

          #ai-chatbot-greeting-curve {
              position: absolute;
              bottom: 17px;
              right: -54px;
              width: 180px;
              height: 100px;
              pointer-events: none;
          }

          #ai-chatbot-greeting-curve svg {
            width: 100%;
            height: 100%;
          }

          #ai-chatbot-greeting-curve text {
            fill: #00a8e8;
            font-size: 18px;
            font-weight: bold;
            font-family: 'Comic Sans MS', cursive, sans-serif;
          }

          .wave-emoji {
            position: absolute;
            left: 8px;
            bottom: 23px;
            font-size: 22px;
            animation: wave 1.2s infinite;
          }

          @keyframes wave {
            0% { transform: rotate(0.0deg); }
            10% { transform: rotate(14.0deg); }
            20% { transform: rotate(-8.0deg); }
            30% { transform: rotate(14.0deg); }
            40% { transform: rotate(-4.0deg); }
            50% { transform: rotate(10.0deg); }
            60% { transform: rotate(0.0deg); }
            100% { transform: rotate(0.0deg); }
          }

          
          #ai-chatbot-button {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: #2a3864;
            border: none;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
          }
          #ai-chatbot-button:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 20px rgba(0,0,0,0.2);
          }
          #ai-chatbot-button svg {
            width: 24px;
            height: 24px;
            fill: white;
          }
          #ai-chatbot-window {
            position: absolute;
            bottom: 80px;
            right: 0;
            width: 300px;
            height: 412px;
            bottom: 55px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.12);
            display: none;
            flex-direction: column;
            overflow: hidden;
          }
          #ai-chatbot-header {
            background: #111844;
            color: white;
            padding: 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            height:20px;
          }
          #ai-chatbot-header h3 {
            margin: 0;
            color:white;
            font-size: 16px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
          }
          /* NEW: header actions container for mic and close buttons */
          #ai-chatbot-header-actions {
            display: flex;
            align-items: center;
            gap: 6px;
          }
          .ai-chatbot-header-logo { height: 24px; width: auto; }

          /* NEW: Header microphone button styles */
          #ai-chatbot-mic {
            background: rgba(255,255,255,0.15);
            border: none;
            border-radius: 50%;
            width: 28px; height: 28px;
            cursor: pointer;
            display: inline-flex; align-items: center; justify-content: center;
            transition: background-color 0.2s, transform 0.2s, box-shadow 0.2s;
          }
          #ai-chatbot-mic:hover { transform: scale(1.05); box-shadow: 0 2px 8px rgba(0,0,0,0.12); }
          #ai-chatbot-mic svg { width: 14px; height: 14px; fill: #fff; }
          #ai-chatbot-mic.listening { background: #ef4444; }
          #ai-chatbot-mic:disabled { opacity: 0.5; cursor: not-allowed; }

          #ai-chatbot-close {
            background: none; border: none; color: white; cursor: pointer;
            font-size: 20px; padding: 0; width: 24px; height: 24px;
            display: flex; align-items: center; justify-content: center;
          }
          #ai-chatbot-messages {
            flex: 1;
            padding: 16px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 1px;
            background: #fff;
          }
          .ai-chatbot-message {
            max-width: 80%;
            padding: 8px 12px;
            border-radius: 12px;
            font-size: 12px;
            line-height: 1.4;
            font-weight:600;
          }
          .ai-chatbot-message.user {
            background: #2a3864;
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 4px;
          }
          .ai-chatbot-message.bot {
            background: #f1f5f9;
            color: #334155;
            align-self: flex-start;
            border-bottom-left-radius: 4px;
            font-size: 11px;
            word-wrap: break-word;
            overflow-wrap: break-word;
            white-space: pre-wrap;
            max-width: 90%;
          }
          .ai-chatbot-message.bot a {
            color: #007bff; /* Bright blue color */
            text-decoration: underline; /* Optional: adds underline */
            word-break: break-all; /* Ensures long URLs wrap properly */
          }

          .ai-chatbot-message.bot a:hover {
            color: #rgb(15, 0, 83)/* Darker blue on hover */
          }
          .ai-chatbot-message.typing {
            background: #f1f5f9;
            color: #64748b;
            align-self: flex-start;
            border-bottom-left-radius: 4px;
            display: flex;
            align-items: center;
            gap: 8px;
          }
          .ai-chatbot-typing-logo { height: 20px; width: auto; }
          .ai-chatbot-welcome-logo-container {
            display: block;
            min-height: 110px;
            margin: auto;
          }
          .ai-chatbot-welcome-logo {
            max-height: 90px; 
            object-fit: contain;
          }
          #ai-chatbot-input-container {
            padding: 16px; 
            border-top: 1px solid #e2e8f0; 
            display: flex; 
            gap: 8px;
          }
          #ai-chatbot-input {
            flex: 1; border: 1px solid #e2e8f0; 
            border-radius: 20px; 
            padding: 8px 16px;
            font-size: 14px; 
            outline: none; 
            resize: none; font-family: 
            inherit; height: 20px; 
            scrollbar-width: none;
            height: 40px;
          }
          #ai-chatbot-input:focus { border-color: ${this.config.theme.primaryColor}; }
          #ai-chatbot-send {
            background: ${this.config.theme.primaryColor}; border: none; border-radius: 50%;
            width: 36px; height: 36px; cursor: pointer; display: flex; align-items: center; justify-content: center;
            transition: opacity 0.2s;
          }
          #ai-chatbot-send:disabled { opacity: 0.5; cursor: not-allowed; }
          #ai-chatbot-send svg { width: 16px; height: 16px; fill: white; }
          .ai-chatbot-buttons-container {
            display: flex; flex-direction: column; gap: 8px; margin-top: 12px; width: 100%; align-items: flex-start;
          }
          .ai-chatbot-button-option {            
            background: #e2e8f0;
            border: 1px solid #cbd5e1;
            border-radius: 8px;
            padding: 5px 15px;
            font-size: 12px;
            cursor: pointer;
            text-align: left;
            width: 90%;
            transition: background 0.2s, border-color 0.2s;
            font-weight: 606;
            height: 30px;
          }
          .ai-chatbot-button-option:hover { background: #d1d5db; border-color: #94a3b8; }
          @media (max-width: 480px) {
            #ai-chatbot-window { width: calc(100vw - 40px); height: calc(100vh - 100px); bottom: 80px; right: 20px; }
          }
        </style>
         
        <div id="ai-chatbot-greeting-curve">
          <span class="wave-emoji">üëã</span>
          <svg viewBox="0 0 300 100">
            <defs>
              <path id="curvePath" d="M 50 80 Q 150 0 250 80" />
            </defs>
            <text width="100%">
              <textPath href="#curvePath" startOffset="50%" text-anchor="middle">
                How can we assist?
              </textPath>
            </text>
          </svg>
        </div>

        <button id="ai-chatbot-button" title="Open Chat">
          <img src="https://nwcmc.gov.in/web/upload_files/website/img/logo/weblogo6364d3f0f495b6ab9dcf8d3b5c6e0b01.png" alt="Open Chat" style="height: 45px;">
        </button>

        <div id="ai-chatbot-window">
          <div id="ai-chatbot-header">
            <h3><img src="${LOGO_URL}" alt="NWCMC Logo" class="ai-chatbot-header-logo" /> NWCMC Assistant</h3>
            <div id="ai-chatbot-header-actions">
              <button id="ai-chatbot-close" aria-label="Close">&times;</button>
            </div>
          </div>
          <div id="ai-chatbot-messages"></div>
          <div id="ai-chatbot-input-container">
            <textarea id="ai-chatbot-input" placeholder="Type your message..." aria-label="Message input"></textarea>
            <button id="ai-chatbot-send" disabled aria-label="Send">
              <svg viewBox="0 0 24 24"><path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/></svg>
            </button>
          </div>
        </div>
      `
      document.body.appendChild(widgetContainer)
    },

    attachEventListeners: function () {
      const button = document.getElementById("ai-chatbot-button")
      const closeBtn = document.getElementById("ai-chatbot-close")
      const input = document.getElementById("ai-chatbot-input")
      const sendBtn = document.getElementById("ai-chatbot-send")
      const micBtn = document.getElementById("ai-chatbot-mic")

      button.addEventListener("click", () => this.toggleWidget())
      closeBtn.addEventListener("click", () => this.closeWidget())

      input.addEventListener("input", () => {
        sendBtn.disabled = !input.value.trim()
        this.autoResize(input)
      })
      input.addEventListener("keypress", (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault()
          this.sendMessage()
        }
      })
      sendBtn.addEventListener("click", () => this.sendMessage())

      // NEW: Mic click toggles listening; works independently as voice search
      if (micBtn) {
        micBtn.addEventListener("click", async () => {
          if (!this.sttSupported) {
            this.addMessageToHistory(
              this.currentLanguage === "marathi"
                ? "‡§ï‡•ç‡§∑‡§Æ‡§∏‡•ç‡§µ, ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ù‡§∞‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Ü‡§µ‡§æ‡§ú ‡§á‡§®‡§™‡•Å‡§ü ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§æ‡§π‡•Ä."
                : "Sorry, voice input is not supported in your browser.",
            )
            return
          }
          if (this.isListening) {
            this.stopListening(true)
          } else {
            await this.startListening()
          }
        })
      }
    },

    toggleWidget: function () {
      const windowElement = document.getElementById("ai-chatbot-window")
      if (this.isOpen) {
        this.closeWidget()
      } else {
        windowElement.style.display = "flex"
        this.isOpen = true
        this.renderMessages()
        document.getElementById("ai-chatbot-input").focus()
        this.updateInputState()
      }
    },

    closeWidget: function () {
      const windowElement = document.getElementById("ai-chatbot-window")
      windowElement.style.display = "none"
      this.isOpen = false
    },

    autoResize: (textarea) => {
      textarea.style.height = "auto"
      textarea.style.height = Math.min(textarea.scrollHeight, 100) + "px"
    },

    linkify: (text) => {
      const urlRegex = /(https?:\/\/[^\s]+)/g
      return (text || "").replace(urlRegex, (url) => {
        return `<a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`
      })
    },

    // Renders history
    renderMessages: function () {
      const messagesContainer = document.getElementById("ai-chatbot-messages")
      messagesContainer.innerHTML = ""

      this.messages.forEach((msg) => {
        if (msg.type === "text") {
          const messageDiv = document.createElement("div")
          messageDiv.classList.add("ai-chatbot-message", msg.isUser ? "user" : "bot")
          const content = msg.content || ""
          messageDiv.innerHTML = this.linkify(content)
            .replace(/\n\n/g, "<br><br>")
            .replace(/\n/g, "<br>")
            .replace(/(?:^|\n)- (.*?)(?=\n|$)/g, "<br>&bull; $1")
          messagesContainer.appendChild(messageDiv)
        } else if (msg.type === "buttons") {
          this.appendButtonsToDOM(msg.buttons)
        } else if (msg.type === "welcome_logo") {
          const logoContainer = document.createElement("div")
          logoContainer.className = "ai-chatbot-welcome-logo-container"
          logoContainer.innerHTML = `<img src="${LOGO_URL}" alt="Welcome Logo" class="ai-chatbot-welcome-logo" />`
          messagesContainer.appendChild(logoContainer)
        }
      })

      messagesContainer.scrollTop = messagesContainer.scrollHeight
    },

    addMessageToHistory: function (content, isUser = false, type = "text") {
      this.messages.push({ type, content, isUser })
      if (this.isOpen) this.renderMessages()
    },

    addButtonsToHistory: function (buttons) {
      this.messages.push({ type: "buttons", buttons })
      if (this.isOpen) this.renderMessages()
    },

    appendButtonsToDOM: function (buttons) {
      const messagesContainer = document.getElementById("ai-chatbot-messages")
      const buttonsContainer = document.createElement("div")
      buttonsContainer.className = "ai-chatbot-buttons-container"

      buttons.forEach((btn) => {
        const buttonElement = document.createElement("button")
        buttonElement.className = "ai-chatbot-button-option"
        buttonElement.textContent = btn.label
        buttonElement.dataset.action = btn.action // 'language' | 'top' | 'menu' | 'submenu' | 'other' | nav actions
        buttonElement.dataset.value = btn.value || ""
        // Keep some additional context
        if (btn.top) buttonElement.dataset.top = btn.top
        if (btn.menuQuery) buttonElement.dataset.menuQuery = btn.menuQuery
        if (btn.subQuery) buttonElement.dataset.subQuery = btn.subQuery

        buttonElement.addEventListener("click", () => this.handleButtonClick(buttonElement))
        buttonsContainer.appendChild(buttonElement)
      })
      messagesContainer.appendChild(buttonsContainer)
      messagesContainer.scrollTop = messagesContainer.scrollHeight
    },

    updateInputState: function () {
      const input = document.getElementById("ai-chatbot-input")
      const sendBtn = document.getElementById("ai-chatbot-send")
      const micBtn = document.getElementById("ai-chatbot-mic")

      if (this.currentLevel === "free_text") {
        input.disabled = false
        sendBtn.disabled = !input.value.trim()
        input.focus()
      } else {
        input.disabled = true
        sendBtn.disabled = true
      }

      // Mic should be available independently (enable if STT supported)
      if (micBtn) {
        if (this.sttSupported) {
          micBtn.disabled = false
          micBtn.style.opacity = "1"
          micBtn.style.cursor = "pointer"
        } else {
          micBtn.disabled = true
          micBtn.style.opacity = "0.5"
          micBtn.style.cursor = "not-allowed"
        }
      }
    },

    resetChat: function () {
      this.messages = []
      this.currentLanguage = null
      this.currentLevel = "language_select"
      this.currentTopCategory = null
      this.currentMenuContext = null

      // Prominent logo
      this.addMessageToHistory(null, false, "welcome_logo")
      // Welcome + language buttons
      this.addMessageToHistory("Welcome to NWCMC Assistant / NWCMC ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï‡§æ‡§§ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‚Äî Choose Language / ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ")
      this.addButtonsToHistory([
        { label: "English", action: "language", value: "english" },
        { label: "Marathi", action: "language", value: "marathi" },
      ])
      this.updateInputState()
    },

    // Navigation helpers
    showTopCategories: function () {
      const lang = this.MENU_STRUCTURE[this.currentLanguage]
      this.addMessageToHistory(this.currentLanguage === "marathi" ? "‡§ï‡•É‡§™‡§Ø‡§æ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§®‡§ø‡§µ‡§°‡§æ:" : "Please choose a category:")
      const buttons = lang.topCategories.map((c) => ({
        label: c.label,
        action: "top",
        top: c.key,
      }))
      buttons.push({ label: lang.other_option, action: "other" })
      this.addButtonsToHistory(buttons)
      this.updateInputState()
    },

    showSecondMenus: function () {
      const lang = this.MENU_STRUCTURE[this.currentLanguage]
      const topKey = this.currentTopCategory
      const block = lang[topKey]
      this.addMessageToHistory(block.title)
      const buttons = block.menus.map((m) => ({
        label: m.label,
        action: "menu",
        top: topKey,
        menuQuery: m.query,
      }))
      buttons.push({ label: lang.back_main, action: "back_to_top" }, { label: lang.other_option, action: "other" })
      this.addButtonsToHistory(buttons)
      this.updateInputState()
    },

    showSubmenus: function (menuQuery) {
      const lang = this.MENU_STRUCTURE[this.currentLanguage]
      const topKey = this.currentTopCategory
      const block = lang[topKey]
      const menu = block.menus.find((m) => m.query === menuQuery)
      if (!menu) return

      this.currentMenuContext = menu
      const header =
        this.currentLanguage === "marathi"
          ? `‡§®‡§ø‡§µ‡§°‡§≤‡•á: ${menu.label}\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§™-‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§®‡§ø‡§µ‡§°‡§æ:`
          : `${menu.label} selected.\nPlease choose a sub-category:`
      this.addMessageToHistory(header)

      const buttons = menu.submenus.map((s) => ({
        label: s.label,
        action: "submenu",
        top: topKey,
        menuQuery: menu.query,
        subQuery: s.query,
      }))
      buttons.push(
        { label: this.MENU_STRUCTURE[this.currentLanguage].back_prev, action: "back_to_second" },
        { label: this.MENU_STRUCTURE[this.currentLanguage].back_main, action: "back_to_top" },
        { label: this.MENU_STRUCTURE[this.currentLanguage].other_option, action: "other" },
      )
      this.addButtonsToHistory(buttons)
      this.updateInputState()
    },

    // Button handling
    handleButtonClick: async function (buttonElement) {
      const action = buttonElement.dataset.action
      const value = buttonElement.dataset.value
      const label = buttonElement.textContent
      const top = buttonElement.dataset.top
      const menuQuery = buttonElement.dataset.menuQuery
      const subQuery = buttonElement.dataset.subQuery

      if (!["back_to_top", "back_to_second"].includes(action)) {
        this.addMessageToHistory(label, true)
      }

      if (action === "language") {
        this.currentLanguage = value
        this.currentLevel = "top_category"
        const lang = this.MENU_STRUCTURE[this.currentLanguage]
        this.addMessageToHistory(lang.welcome)
        if (this.recognition) this.recognition.lang = this.getCurrentLangCode()
        if (this.ttsSupported) {
          const wanted = this.getCurrentLangCode()
          this.selectedVoice = this.pickVoiceFor(wanted, window.speechSynthesis.getVoices())
        }
        this.showTopCategories()
        return
      }

      if (action === "top") {
        this.currentTopCategory = top

        // NEW: Direct reply for RTI and Grievance
        if (top === "rti" || top === "grievance" || top === "contact") {
          const block = this.MENU_STRUCTURE[this.currentLanguage][top]
          if (block?.directReply) {
            this.addMessageToHistory(block.directReply)
            this.offerNav()
            this.currentLevel = "top_category"
            this.updateInputState()
            return
          }
        }

        // Suggestion now has only two menus (no submenus) -> still show second level
        if (top === "suggestion") {
          this.currentLevel = "second_menu"
          this.currentMenuContext = null
          this.showSecondMenus()
          return
        }

        // Default flow for RTS and Payments
        this.currentLevel = "second_menu"
        this.currentMenuContext = null
        this.showSecondMenus()
        return
      }

      if (action === "menu") {
        // NEW: If the chosen menu has no submenus, reply immediately
        const lang = this.MENU_STRUCTURE[this.currentLanguage]
        const topKey = this.currentTopCategory
        const block = lang?.[topKey]
        const menu = block?.menus?.find((m) => m.query === menuQuery)

        if (menu && (!menu.submenus || menu.submenus.length === 0)) {
          if (menu.reply) {
            this.addMessageToHistory(menu.reply)
          } else if (menu.replyKey) {
            const sample = this.SAMPLE_RESPONSES[menu.replyKey] || "Information will appear here."
            this.addMessageToHistory(sample)
          } else {
            this.addMessageToHistory("Information will appear here.")
          }
          this.offerNav()
          this.updateInputState()
          return
        }

        // Otherwise continue to submenus as before
        this.currentLevel = "submenu"
        this.showSubmenus(menuQuery)
        return
      }

      if (action === "submenu") {
        const topKey = this.currentTopCategory
        const langKey = this.currentLanguage
        const fullQuery = `${topKey.toUpperCase()} - ${menuQuery} - ${subQuery}`

        // Keep payments and other samples same
        // if (topKey === "payments") {
        //   const sample = this.SAMPLE_RESPONSES[subQuery] || "Payment information (sample) will appear here."
        //   this.addMessageToHistory(sample)
        //   this.offerNav()
        //   return
        // }

        // Default: call backend AI (unchanged)
        this.currentLevel = "free_text"
        this.updateInputState()

        const messagesContainer = document.getElementById("ai-chatbot-messages")
        const typingMessageDiv = document.createElement("div")
        typingMessageDiv.classList.add("ai-chatbot-message", "bot", "typing")
        typingMessageDiv.innerHTML = `<img src="${LOGO_URL}" alt="Typing" class="ai-chatbot-typing-logo" /> <span class="dot-flashing"></span> ${
          langKey === "marathi" ? "‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§Ü‡§£‡§§ ‡§Ü‡§π‡•á..." : "Fetching information..."
        }`
        messagesContainer.appendChild(typingMessageDiv)
        messagesContainer.scrollTop = messagesContainer.scrollHeight

        try {
          const response = await fetch(this.config.apiUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: fullQuery, language: langKey }),
          })
          const data = await response.json()
          typingMessageDiv.remove()
          this.addMessageToHistory(
            data.response || (langKey === "marathi" ? "‡§ï‡•ç‡§∑‡§Æ‡§∏‡•ç‡§µ, ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§æ‡§π‡•Ä." : "Sorry, no information found."),
          )
          // if (data && data.response) this.speakText(data.response)
          this.offerNav()
        } catch (err) {
          console.error("Chat error:", err)
          typingMessageDiv.remove()
          this.addMessageToHistory(
            langKey === "marathi" ? "‡§ï‡•ç‡§∑‡§Æ‡§∏‡•ç‡§µ, ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§π‡•á." : "Sorry, I'm having trouble connecting.",
          )
          this.offerNav()
        } finally {
          this.currentLevel = "submenu"
          this.updateInputState()
        }
        return
      }

      if (action === "other") {
        this.currentLevel = "free_text"
        this.addMessageToHistory(
          this.currentLanguage === "marathi" ? "‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§æ." : "Please type your question.",
        )
        this.updateInputState()
        return
      }

      if (action === "back_to_top") {
        this.currentLevel = "top_category"
        this.currentMenuContext = null
        this.showTopCategories()
        return
      }

      if (action === "back_to_second") {
        this.currentLevel = "second_menu"
        this.currentMenuContext = null
        this.showSecondMenus()
        return
      }

      if (action === "start_over") {
        this.resetChat()
        return
      }
    },

    offerNav: function () {
      const lang = this.MENU_STRUCTURE[this.currentLanguage]
      this.addButtonsToHistory([
        { label: lang.back_prev, action: "back_to_second" },
        { label: lang.back_main, action: "back_to_top" },
        { label: lang.start_over, action: "start_over" },
      ])
    },

    async sendMessage(message = null, isMenuItem = false) {
      const input = document.getElementById("ai-chatbot-input")
      const sendBtn = document.getElementById("ai-chatbot-send")
      const messageToSend = message || input.value.trim()
      if (!messageToSend) return

      if (!isMenuItem) {
        this.addMessageToHistory(messageToSend, true)
      }

      input.value = ""
      sendBtn.disabled = true
      this.autoResize(input)

      // Typing indicator
      const messagesContainer = document.getElementById("ai-chatbot-messages")
      const typingMessageDiv = document.createElement("div")
      typingMessageDiv.classList.add("ai-chatbot-message", "bot", "typing")
      typingMessageDiv.innerHTML = `<img src="${LOGO_URL}" alt="Typing" class="ai-chatbot-typing-logo" /> <span class="dot-flashing"></span> ${
        this.currentLanguage === "marathi" ? "‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§Ü‡§£‡§§ ‡§Ü‡§π‡•á..." : "Fetching information..."
      }`
      messagesContainer.appendChild(typingMessageDiv)
      messagesContainer.scrollTop = messagesContainer.scrollHeight

      try {
        const response = await fetch(this.config.apiUrl, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            message: messageToSend,
            language: this.currentLanguage || "english",
          }),
        })
        const data = await response.json()
        typingMessageDiv.remove()
        this.addMessageToHistory(
          data.response ||
            (this.currentLanguage === "marathi" ? "‡§ï‡•ç‡§∑‡§Æ‡§∏‡•ç‡§µ, ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§æ‡§π‡•Ä." : "Sorry, no information found."),
        )
        // Speak the response (NEW)
        // if (data && data.response) {
        //   this.speakText(data.response)
        // }
      } catch (error) {
        console.error("Chat error:", error)
        typingMessageDiv.remove()
        this.addMessageToHistory(
          this.currentLanguage === "marathi" ? "‡§ï‡•ç‡§∑‡§Æ‡§∏‡•ç‡§µ, ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§π‡•á." : "Sorry, I'm having trouble connecting.",
        )
      } finally {
        // After free-text, offer navigation options
        this.offerNav()
        this.updateInputState()
      }
    },

    // ===== Voice utilities (NEW) =====

    // Current BCP-47 language for STT/TTS
    getCurrentLangCode: function () {
      if (this.currentLanguage === "marathi") return "mr-IN"
      return "en-IN" // default English; change to 'en-US' if you prefer
    },

    // Initialize TTS and STT
    initVoice: function () {
      // TTS support
      this.ttsSupported = typeof window !== "undefined" && "speechSynthesis" in window
      if (this.ttsSupported) {
        const loadVoices = () => {
          const voices = window.speechSynthesis.getVoices()
          this.selectedVoice = this.pickVoiceFor(this.getCurrentLangCode(), voices)
        }
        window.speechSynthesis.onvoiceschanged = () => loadVoices()
        loadVoices()
      }

      // STT support
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
      if (SpeechRecognition) {
        this.sttSupported = true
        this.recognition = new SpeechRecognition()
        this.recognition.continuous = false
        this.recognition.interimResults = false
        this.recognition.maxAlternatives = 1
        this.recognition.lang = this.getCurrentLangCode()

        this.recognition.onstart = () => {
          this.isListening = true
          const micBtn = document.getElementById("ai-chatbot-mic")
          if (micBtn) micBtn.classList.add("listening")
        }
        this.recognition.onend = () => {
          this.isListening = false
          const micBtn = document.getElementById("ai-chatbot-mic")
          if (micBtn) micBtn.classList.remove("listening")
        }
        this.recognition.onerror = (e) => {
          console.error("STT error:", e)
          this.isListening = false
          const micBtn = document.getElementById("ai-chatbot-mic")
          if (micBtn) micBtn.classList.remove("listening")
          if (e.error !== "no-speech") {
            this.addMessageToHistory(
              this.currentLanguage === "marathi"
                ? "‡§Ü‡§µ‡§æ‡§ú ‡§ï‡•Ö‡§™‡•ç‡§ö‡§∞ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§≤‡•Ä."
                : "There was a problem capturing your voice.",
            )
          }
        }
        this.recognition.onresult = (event) => {
          try {
            const transcript = (event.results?.[0]?.[0]?.transcript || "").trim()
            if (transcript) {
              // Show user's voice as text and query KB backend
              this.addMessageToHistory(transcript, true)
              this.sendMessage(transcript, true)
            }
          } catch (err) {
            console.error("STT parse error:", err)
          }
        }
      } else {
        this.sttSupported = false
        const micBtn = document.getElementById("ai-chatbot-mic")
        if (micBtn) {
          micBtn.disabled = true
          micBtn.title = this.currentLanguage === "marathi" ? "‡§Ü‡§µ‡§æ‡§ú ‡§á‡§®‡§™‡•Å‡§ü ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§æ‡§π‡•Ä" : "Voice input not available"
        }
      }
    },

    // Choose a voice matching lang; fallback sensibly
    pickVoiceFor: (lang, voices) => {
      if (!voices || !voices.length) return null
      const exact = voices.find((v) => v.lang?.toLowerCase() === lang.toLowerCase())
      if (exact) return exact
      const base = lang.split("-")[0].toLowerCase()
      const sameBase = voices.find((v) => v.lang?.toLowerCase().startsWith(base))
      if (sameBase) return sameBase
      const google = voices.find((v) => v.name?.toLowerCase().includes("google"))
      return google || voices[0]
    },

    // Start listening to user speech
    startListening: async function () {
      try {
        if (!this.recognition) return
        // Align recognition language
        this.recognition.lang = this.getCurrentLangCode()

        // Stop any speaking to avoid echo
        if (this.ttsSupported && window.speechSynthesis.speaking) {
          window.speechSynthesis.cancel()
        }

        this.recognition.start()
      } catch (err) {
        console.error("Failed to start STT:", err)
        this.addMessageToHistory(
          this.currentLanguage === "marathi" ? "‡§Æ‡§æ‡§Ø‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡§æ ‡§Ü‡§≤‡§æ ‡§®‡§æ‡§π‡•Ä." : "Could not start the microphone.",
        )
      }
    },

    // Stop listening
    stopListening: function () {
      try {
        if (!this.recognition) return
        this.recognition.stop()
      } catch (err) {
        console.error("Failed to stop STT:", err)
      }
    },

    // Speak text response
    speakText: function (text) {
      if (!this.ttsSupported || !text) return
      try {
        // Optional: only speak when widget is open
        if (!this.isOpen) return

        window.speechSynthesis.cancel()

        const utter = new SpeechSynthesisUtterance(text)
        const voices = window.speechSynthesis.getVoices()
        if (!this.selectedVoice) {
          this.selectedVoice = this.pickVoiceFor(this.getCurrentLangCode(), voices)
        }
        utter.lang = this.selectedVoice?.lang || this.getCurrentLangCode()
        if (this.selectedVoice) utter.voice = this.selectedVoice
        utter.rate = 1.0
        utter.pitch = 1.0
        utter.volume = 1.0

        this.speaking = true
        utter.onend = () => (this.speaking = false)
        utter.onerror = (e) => {
          console.error("TTS error:", e)
          this.speaking = false
        }
        window.speechSynthesis.speak(utter)
      } catch (err) {
        console.error("Failed to speak:", err)
      }
    },
  }

  // Expose globally
  window.AIChatbot = AIChatbot
})()


//commented from lne 857:- or near the cross button of chatbot closing
{/* <button id="ai-chatbot-mic" aria-label="Voice input" title="Voice input">
                <svg viewBox="0 0 24 24" aria-hidden="true">
                  <path d="M12 14a3 3 0 0 0 3-3V7a3 3 0 0 0-6 0v4a3 3 0 0 0 3 3zm5-3a5 5 0 0 1-10 0H5a7 7 0 0 0 14 0h-2zm-5 7a7 7 0 0 0 7-7h-2a5 5 0 0 1-10 0H5a7 7 0 0 0 7 7zm-1 3h2v-2h-2v2z"/>
                </svg>
              </button> */}

//1280 and 1374 for speaking the text which has now been commented i.e. wherever:-
//  if (data && data.response)